add_bound_lower (rational) (default: -2) lower bound to be added to unbounded variables.
add_bound_upper (rational) (default: 2) upper bound to be added to unbounded variables.
aig_per_assertion (bool) (default: true) process one assertion at a time.
algebraic_number_evaluator (bool) simplify/evaluate expressions containing (algebraic) irrational numbers. (default: true)
arith.branch_cut_ratio (unsigned int) branch/cut ratio for linear integer arithmetic (default: 2)
arith.euclidean_solver (bool) eucliean solver for linear integer arithmetic (default: false)
arith.ignore_int (bool) treat integer variables as real (default: false)
arith.int_eq_branch (bool) branching using derived integer equations (default: false)
arith.nl (bool) (incomplete) nonlinear arithmetic support based on Groebner basis and interval propagation (default: true)
arith.nl.branching (bool) branching on integer variables in non linear clusters (default: true)
arith.nl.gb (bool) groebner Basis computation, this option is ignored when arith.nl=false (default: true)
arith.nl.rounds (unsigned int) threshold for number of (nested) final checks for non linear arithmetic (default: 1024)
arith.propagate_eqs (bool) propagate (cheap) equalities (default: true)
arith.propagation_mode (unsigned int) 0 - no propagation, 1 - propagate existing literals, 2 - refine bounds (default: 2)
arith.random_initial_value (bool) use random initial values in the simplex-based procedure for linear arithmetic (default: false)
arith.solver (unsigned int) arithmetic solver: 0 - no solver, 1 - bellman-ford based solver (diff. logic only), 2 - simplex based solver, 3 - floyd-warshall based solver (diff. logic only) and no theory combination (default: 2)
arith_lhs (bool) all monomials are moved to the left-hand-side, and the right-hand-side is just a constant. (default: false)
array.extensional (bool) extensional array theory (default: true)
array.weak (bool) weak array theory (default: false)
asymm_branch (bool) asymmetric branching (default: true)
asymm_branch.limit (unsigned int) approx. maximum number of literals visited during asymmetric branching (default: 100000000)
asymm_branch.rounds (unsigned int) maximum number of rounds of asymmetric branching (default: 32)
auto_config (bool) automatically configure solver (default: true)
bit2bool (bool) try to convert bit-vector terms of size 1 into Boolean terms (default: true)
blast_add (bool) (default: true) bit-blast adders.
blast_distinct (bool) expand a distinct predicate into a quadratic number of disequalities (default: false)
blast_distinct_threshold (unsigned int) when blast_distinct is true, only distinct expressions with less than this number of arguments are blasted (default: 4294967295)
blast_eq_value (bool) blast (some) Bit-vector equalities into bits (default: false)
blast_full (bool) (default: false) bit-blast any term with bit-vector sort, this option will make E-matching ineffective in any pattern containing bit-vector terms.
blast_mul (bool) (default: true) bit-blast multipliers (and dividers, remainders).
blast_quant (bool) (default: false) bit-blast quantified variables.
blocked_clause_limit (unsigned int) maximum number of literals visited during blocked clause elimination (default: 100000000)
burst_search (unsigned int) number of conflicts before first global simplification (default: 100)
bv.enable_int2bv (bool) enable support for int2bv and bv2int operators (default: false)
bv.reflect (bool) create enode for every bit-vector term (default: true)
bv_sort_ac (bool) sort the arguments of all AC operators (default: false)
bvnot2arith (bool) replace (bvnot x) with (bvsub -1 x) (default: false)
cache_all (bool) cache all intermediate results. (default: false)
candidate_models (bool) (default: false) create candidate models even when quantifier or theory reasoning is incomplete.
case_split (unsigned int) 0 - case split based on variable activity, 1 - similar to 0, but delay case splits created during the search, 2 - similar to 0, but cache the relevancy, 3 - case split based on relevancy (structural splitting), 4 - case split on relevancy and activity, 5 - case split on relevancy and current goal (default: 1)
cofactor_equalities (bool) (default: true) use equalities to rewrite bodies of ite-expressions. This is potentially expensive.
common_patterns (bool) (default: true) minimize the number of auxiliary variables during CNF encoding by identifing commonly used patterns
complete (bool) (default: true) add constraints to make sure that any interpretation of a underspecified arithmetic operators is a functio. The result will include additional uninterpreted functions/constants: /0, div0, mod0, 0^0, neg-root
dack (unsigned int) 0 - disable dynamic ackermannization, 1 - expand Leibniz's axiom if a congruence is the root of a conflict, 2 - expand Leibniz's axiom if a congruence is used during conflict resolution (default: 1)
dack.eq (bool) enable dynamic ackermannization for transtivity of equalities (default: false)
dack.factor (double) number of instance per conflict (default: 0.1)
dack.gc (unsigned int) Dynamic ackermannization garbage collection frequency (per conflict) (default: 2000)
dack.gc_inv_decay (double) Dynamic ackermannization garbage collection decay (default: 0.8)
dack.threshold (unsigned int)  number of times the congruence rule must be used before Leibniz's axiom is expanded (default: 10)
delay_units (bool) if true then z3 will not restart when a unit clause is learned (default: false)
delay_units_threshold (unsigned int) maximum number of learned unit clauses before restarting, ingored if delay_units is false (default: 32)
distributivity (bool) (default: true) minimize the number of auxiliary variables during CNF encoding by applying distributivity over unshared subformulas
distributivity_blowup (unsigned int) (default: 32) maximum overhead for applying distributivity during CNF encoding
dyn_sub_res (bool) dynamic subsumption resolution for minimizing learned clauses (default: true)
elim_and (bool) conjunctions are rewritten using negation and disjunctions (default: false)
elim_blocked_clauses (bool) eliminate blocked clauses (default: false)
elim_blocked_clauses_at (unsigned int) eliminate blocked clauses only once at the given simplification round (default: 2)
elim_inverses (bool) (default: true) eliminate inverse trigonometric functions (asin, acos, atan).
elim_rem (bool) replace (rem x y) with (ite (>= y 0) (mod x y) (- (mod x y))). (default: false)
elim_root_objects (bool) (default: true) eliminate root objects.
elim_sign_ext (bool) expand sign-ext operator using concat and extract (default: true)
elim_to_real (bool) eliminate to_real from arithmetic predicates that contain only integers. (default: false)
eliminate_variables_as_block (bool) (default: true) eliminate variables as a block (true) or one at a time (false)
ematching (bool) E-Matching based quantifier instantiation (default: true)
eq2ineq (bool) split arithmetic equalities into two inequalities. (default: false)
expand_power (bool) expand (^ t k) into (* t ... t) if  1 < k <= max_degree. (default: false)
expand_select_store (bool) replace a (select (store ...) ...) term by an if-then-else term (default: false)
expand_store_eq (bool) reduce (store ...) = (store ...) with a common base into selects (default: false)
expand_tan (bool) replace (tan x) with (/ (sin x) (cos x)). (default: false)
extrapolate_strategy (unsigned int) (default: 0 trivial extrapolation) 1 - nnf strengthening 2 - smt-test 3 - nnf_weakening
factor (bool) (default: true) factor polynomials.
factor_max_prime (unsigned int) parameter for the polynomial factorization procedure in the algebraic number module. Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. This parameter limits the maximum prime number p to be used in the first step (default: 31)
factor_num_primes (unsigned int) parameter for the polynomial factorization procedure in the algebraic number module. Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. The search space may be reduced by factoring the polynomial in different GF(p)'s. This parameter specify the maximum number of finite factorizations to be considered, before lifiting and searching (default: 1)
factor_search_size (unsigned int) parameter for the polynomial factorization procedure in the algebraic number module. Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. This parameter can be used to limit the search space (default: 5000)
fail_if_inconclusive (bool) (default: true) fail if found unsat (sat) for under (over) approximated goal.
flat (bool) create nary applications for and,or,+,*,bvadd,bvmul,bvand,bvor,bvxor (default: true)
gc (symbol) garbage collection strategy: psm, glue, glue_psm, dyn_psm (default: glue_psm)
gc.increment (unsigned int) increment to the garbage collection threshold (default: 500)
gc.initial (unsigned int) learned clauses garbage collection frequence (default: 20000)
gc.k (unsigned int) learned clauses that are inactive for k gc rounds are permanently deleted (only used in dyn_psm) (default: 7)
gc.small_lbd (unsigned int) learned clauses with small LBD are never deleted (only used in dyn_psm) (default: 3)
gcd_rounding (bool) use gcd rounding on integer arithmetic atoms. (default: false)
hi_div0 (bool) use the 'hardware interpretation' for division by zero (for bit-vector terms) (default: true)
hoist_cmul (bool) hoist constant multiplication over summation to minimize number of multiplications (default: false)
hoist_mul (bool) hoist multiplication over summation to minimize number of multiplications (default: false)
ignore_labels (bool) remove/ignore labels in the input formula, this option is ignored if proofs are enabled (default: false)
ignore_solver1 (bool) if true, solver 2 is always used (default: false)
ite_chaing (bool) (default: true) minimize the number of auxiliary variables during CNF encoding by identifing if-then-else chains
ite_extra (bool) (default: true) add redundant clauses (that improve unit propagation) when encoding if-then-else formulas
ite_extra_rules (bool) extra ite simplifications, these additional simplifications may reduce size locally but increase globally (default: false)
ite_solver (bool) (default: true) use if-then-else solver.
lazy (unsigned int) how lazy the solver is. (default: 0)
learned (bool) (default: false) collect also learned clauses.
lia2pb_max_bits (unsigned int) (default: 32) maximum number of bits to be used (per variable) in lia2pb.
lia2pb_partial (bool) (default: false) partial lia2pb conversion.
lia2pb_total_bits (unsigned int) (default: 2048) total number of bits to be used (per problem) in lia2pb.
local_ctx (bool) perform local (i.e., cheap) context simplifications (default: false)
local_ctx_limit (unsigned int) limit for applying local context simplifier (default: 4294967295)
macro_finder (bool) try to find universally quantified formulas that can be viewed as macros (default: false)
max_args (unsigned int) (default: 128) maximum number of arguments (per application) that will be considered by the greedy (quadratic) heuristic.
max_conflicts (unsigned int) maximum number of conflicts (default: 4294967295)
max_degree (unsigned int) max degree of algebraic numbers (and power operators) processed by simplifier. (default: 64)
max_depth (unsigned int) (default: 1024) maximum term depth.
max_memory (unsigned int) maximum amount of memory in megabytes (default: 4294967295)
max_prime (unsigned int) (default: infty) Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. This parameter limits the maximum prime number p to be used in the first step.
max_rounds (unsigned int) (default: 2) maximum number of rounds.
max_search_size (unsigned int) (default: infty) Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. This parameter can be used to limit the search space.
max_steps (unsigned int) maximum number of steps (default: 4294967295)
mbqi (bool) model based quantifier instantiation (MBQI) (default: true)
mbqi.force_template (unsigned int) some quantifiers can be used as templates for building interpretations for functions. Z3 uses heuristics to decide whether a quantifier will be used as a template or not. Quantifiers with weight >= mbqi.force_template are forced to be used as a template (default: 10)
mbqi.id (string) Only use model-based instantiation for quantifiers with id's beginning with string (default: )
mbqi.max_cexs (unsigned int) initial maximal number of counterexamples used in MBQI, each counterexample generates a quantifier instantiation (default: 1)
mbqi.max_cexs_incr (unsigned int) increment for MBQI_MAX_CEXS, the increment is performed after each round of MBQI (default: 0)
mbqi.max_iterations (unsigned int) maximum number of rounds of MBQI (default: 1000)
mbqi.trace (bool) generate tracing messages for Model Based Quantifier Instantiation (MBQI). It will display a message before every round of MBQI, and the quantifiers that were not satisfied (default: false)
min_mag (unsigned int) Z3 represents algebraic numbers using a (square-free) polynomial p and an isolating interval (which contains one and only one root of p). This interval may be refined during the computations. This parameter specifies whether to cache the value of a refined interval or not. It says the minimal size of an interval for caching purposes is 1/2^16 (default: 16)
minimize_conflicts (bool) minimize conflicts (default: false)
minimize_lemmas (bool) minimize learned clauses (default: true)
mode (symbol) NNF translation mode: skolem (skolem normal form), quantifiers (skolem normal form + quantifiers in NNF), full (default: skolem)
model (bool) model generation for solvers, this parameter can be overwritten when creating a solver (default: true)
mul2concat (bool) replace multiplication by a power of two into a concatenation (default: false)
mul_to_power (bool) collpase (* t ... t) into (^ t k), it is ignored if expand_power is true. (default: false)
nla2bv_bv_size (unsigned int) (default: 4) default bit-vector size used by nla2bv tactic.
nla2bv_divisor (unsigned int) (default: 2) nla2bv tactic parameter.
nla2bv_max_bv_size (unsigned int) (default: inf) maximum bit-vector size used by nla2bv tactic
nla2bv_root (unsigned int) (default: 2) nla2bv tactic encodes reals into bit-vectors using expressions of the form a+b*sqrt(c), this parameter sets the value of c used in the encoding.
norm_int_only (bool) (default: true) normalize only the bounds of integer constants.
num_primes (unsigned int) (default: 1) Z3 polynomial factorization is composed of three steps: factorization in GF(p), lifting and search. The search space may be reduced by factoring the polynomial in different GF(p)'s. This parameter specify the maximum number of finite factorizations to be considered, before lifiting and searching.
pb2bv_all_clauses_limit (unsigned int) (default: 8) maximum number of literals for using equivalent CNF encoding of PB constraint.
pb2bv_cardinality_limit (unsigned int) (default: inf) limit for using arc-consistent cardinality constraint encoding.
phase (symbol) phase selection strategy: always_false, always_true, caching, random (default: caching)
phase.caching.off (unsigned int) phase caching off period (in number of conflicts) (default: 100)
phase.caching.on (unsigned int) phase caching on period (in number of conflicts) (default: 400)
phase_selection (unsigned int) phase selection heuristic: 0 - always false, 1 - always true, 2 - phase caching, 3 - phase caching conservative, 4 - phase caching conservative 2, 5 - random, 6 - number of occurrences (default: 3)
produce_models (bool) (default: false) model generation.
projection_mode (bool) (default: true - full) false - partial quantifier instantiation
proof (bool) proof generation, it must be enabled when the Z3 context is created (default: false)
pull_cheap_ite (bool) pull if-then-else terms when cheap. (default: false)
pull_nested_quantifiers (bool) pull nested quantifiers (default: false)
push_ite_arith (bool) push if-then-else over arithmetic terms. (default: false)
push_ite_bv (bool) push if-then-else over bit-vector terms. (default: false)
push_to_real (bool) distribute to_real over * and +. (default: true)
qe_nonlinear (bool) (default: false) enable virtual term substitution.
qi.cost (string) expression specifying what is the cost of a given quantifier instantiation (default: (+ weight generation))
qi.eager_threshold (double) threshold for eager quantifier instantiation (default: 10.0)
qi.lazy_threshold (double) threshold for lazy quantifier instantiation (default: 20.0)
qi.max_instances (unsigned int) maximum number of quantifier instantiations (default: 4294967295)
qi.max_multi_patterns (unsigned int) specify the number of extra multi patterns (default: 0)
qi.profile (bool) profile quantifier instantiation (default: false)
qi.profile_freq (unsigned int) how frequent results are reported by qi.profile (default: 4294967295)
random_freq (double) frequency of random case splits (default: 0.01)
random_seed (unsigned int) random seed for the smt solver (default: 0)
randomize (bool) randomize selection of a witness in nlsat. (default: true)
refine_inj_axioms (bool) refine injectivity axioms (default: true)
relevancy (unsigned int) relevancy propagation heuristic: 0 - disabled, 1 - relevancy is tracked by only affects quantifier instantiation, 2 - relevancy is tracked, and an atom is only asserted if it is relevant (default: 2)
reorder (bool) reorder variables. (default: true)
resolution (bool) eliminate boolean variables using resolution (default: true)
resolution.cls_cutoff1 (unsigned int) limit1 - total number of problems clauses for the second cutoff of Boolean variable elimination (default: 100000000)
resolution.cls_cutoff2 (unsigned int) limit2 - total number of problems clauses for the second cutoff of Boolean variable elimination (default: 700000000)
resolution.limit (unsigned int) approx. maximum number of literals visited during variable elimination (default: 500000000)
resolution.lit_cutoff_range1 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing less than res_cls_cutoff1 clauses (default: 700)
resolution.lit_cutoff_range2 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing more than res_cls_cutoff1 and less than res_cls_cutoff2 (default: 400)
resolution.lit_cutoff_range3 (unsigned int) second cutoff (total number of literals) for Boolean variable elimination, for problems containing more than res_cls_cutoff2 (default: 300)
resolution.occ_cutoff (unsigned int) first cutoff (on number of positive/negative occurrences) for Boolean variable elimination (default: 10)
resolution.occ_cutoff_range1 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing less than res_cls_cutoff1 clauses (default: 8)
resolution.occ_cutoff_range2 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing more than res_cls_cutoff1 and less than res_cls_cutoff2 (default: 5)
resolution.occ_cutoff_range3 (unsigned int) second cutoff (number of positive/negative occurrences) for Boolean variable elimination, for problems containing more than res_cls_cutoff2 (default: 3)
restart (symbol) restart strategy: luby or geometric (default: luby)
restart.factor (double) restart increment factor for geometric strategy (default: 1.5)
restart.initial (unsigned int) initial restart (number of conflicts) (default: 100)
restart_factor (double) when using geometric (or inner-outer-geometric) progression of restarts, it specifies the constant used to multiply the currect restart threshold (default: 1.1)
restart_strategy (unsigned int) 0 - geometric, 1 - inner-outer-geometric, 2 - luby, 3 - fixed, 4 - arithmetic (default: 1)
scc (bool) eliminate Boolean variables by computing strongly connected components (default: true)
seed (unsigned int) random seed. (default: 0)
shuffle_vars (bool) use a random variable order. (default: false)
simplify_conflicts (bool) simplify conflicts using equalities before resolving them in nlsat solver. (default: true)
sk_hack (bool) hack for VCC (default: false)
skolemize (bool) skolemize (existential force) quantifiers (default: true)
solve_eqs_max_occs (unsigned int) (default: infty) maximum number of occurrences for considering a variable for gaussian eliminations.
solver2_timeout (unsigned int) fallback to solver 1 after timeout even when in incremental model (default: 4294967295)
solver2_unknown (unsigned int) what should be done when solver 2 returns unknown: 0 - just return unknown, 1 - execute solver 1 if quantifier free problem, 2 - execute solver 1 (default: 1)
som (bool) put polynomials in som-of-monomials form (default: false)
som_blowup (unsigned int) maximum number of monomials generated when putting a polynomial in sum-of-monomials normal form (default: 4294967295)
sort_store (bool) sort nested stores when the indices are known to be different (default: false)
sort_sums (bool) sort the arguments of + application. (default: false)
split_concat_eq (bool) split equalities of the form (= (concat t1 t2) t3) (default: false)
split_factors (bool) (default: true) apply simplifications such as (= (* p1 p2) 0) --> (or (= p1 0) (= p2 0)).
strong_context_simplify (bool) (default: true) use strong context simplifier on result of quantifier elimination
strong_context_simplify_local (bool) (default: false) use strong context simplifier locally on the new formula only
subsumption (bool) eliminate subsumed clauses (default: true)
subsumption.limit (unsigned int) approx. maximum number of literals visited during subsumption (and subsumption resolution) (default: 100000000)
theory_solver (bool) (default: true) use theory solvers.
timeout (unsigned int) timeout (0 means no timeout) (default: 0)
udiv2mul (bool) convert constant udiv to mul (default: false)
unsat_core (bool) unsat-core generation for solvers, this parameter can be overwritten when creating a solver, not every solver in Z3 supports unsat core generation (default: false)
zero_accuracy (unsigned int) one of the most time-consuming operations in the real algebraic number module is determining the sign of a polynomial evaluated at a sample point with non-rational algebraic number values. Let k be the value of this option. If k is 0, Z3 uses precise computation. Otherwise, the result of a polynomial evaluation is considered to be 0 if Z3 can show it is inside the interval (-1/2^k, 1/2^k) (default: 0)